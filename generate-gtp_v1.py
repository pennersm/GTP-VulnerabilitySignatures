

from scapy.all import *
from decimal import *
from scapy.layers import *
import random
import csv
import socket
import math
from scapy.utils import PcapReader
import re
                   
                   
####################################################################
# Function to validate if an entry is a valid IP address.
####################################################################


def isValidIPv4(ipaddress):

	regex = "^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$"
	
	if re.search(regex, ipaddress):
		return 1
	else:
		print("Invalid IP. Please start again !!!")
		exit()

####################################################################
# Function to validate if an entry is a valid Tunnel Endpoint Identifier.
####################################################################

def isValidTEID(teid):
	
	try:
		value = int(teid, 16)
		if value >= 4294967295:
			print("Should be upto 8 hexadecimal digits")
			exit()
		return 1
	except:
		print("Invalid TEID. Please start again")
		exit()
		
####################################################################
# Function to validate if an entry is a valid IMSI or IMEI; ie it 
# should be an integer and max length is 15.
####################################################################

def isValidIdentify(entry):

	try:
		value = int(entry)
		if len(entry) > 16:
			print("Invalid Entry. Should be maximum of 15 digits. Please start again")
			exit()
		return 1
	except:
		print("Invalid Entry. Please start again")
		exit()
		

####################################################################
# Function to generate GTPv2 Signalling based on input parameters
####################################################################

def generateGTPv2C(interface, mme, enodeb, sgw_s11_c, sgw_s1u, sgw_s5_c, sgw_s5_u, pgw_s5_c, pgw_s5_u, imsi, imei, ue_ip, teid_mme_s11, teid_enodeb_s1u, teid_sgw_s11, teid_sgw_s1u, teid_sgw_s5_c, teid_sgw_s5_u, teid_pgw_s5_c, teid_pgw_s5_u, apn):

	from scapy.contrib import gtp_v2

	seqn = random.randint(2000,10000)
	udp_layer = UDP(sport=2123, dport=2123)

	#Generating Create Session Request

	# Each IE has 4 bytes for IE Type, Lenth, CR and Instance Flags. Hence total gtp message length adds 4 bytes to IE_length for each IE
	
	ie_rat = gtp_v2.IE_RAT(length=1, RAT_type="EUTRAN") #len=5, total=5	
	ie_imsi = gtp_v2.IE_IMSI(length=8, IMSI=imsi) #len=12, total=17
	ie_pdn_type = gtp_v2.IE_PDN_type(length=1, PDN_type="IPv4")  #len=5, total=22
	ie_apn_restriction = gtp_v2.IE_APN_Restriction(length=1)  #len=5, total=27
	ie_mei = gtp_v2.IE_MEI(length=8, MEI=imei)  #len=12, total=39
	uli_tai = gtp_v2.ULI_TAI(MCC="525", MNC="05", TAC=507) # Part of ie_uli
	ecgi = gtp_v2.ULI_ECGI(MCC="525", MNC="05", ECI=3159042) # Part of ie_uli
	ie_uli = gtp_v2.IE_ULI(length=13, ECGI_Present=1, TAI_Present=1, TAI=uli_tai, ECGI=ecgi)  #len=17, total=56
	ie_servingnetwork = gtp_v2.IE_ServingNetwork(length=3, MCC="525", MNC="05")  #len=7, total=63
	ie_indication = gtp_v2.IE_Indication(length=7)  #len=11, total=74
	ie_selectionmode = gtp_v2.IE_SelectionMode(length=1)  #len=5, total=92
	ie_paa = gtp_v2.IE_PAA(length=5, PDN_type="IPv4", ipv4="0.0.0.0")  #len=9, total=101
	ie_ambr = gtp_v2.IE_AMBR(length=8, AMBR_Uplink=150000, AMBR_Downlink=150000)  #len=12, total=113
	#ie_pco = gtp_v2.IE_PCO(length=44)  #len=48
	ie_chargingcharacteristics = gtp_v2.IE_ChargingCharacteristics(length=2)  #len=6, total=119
	ie_ue_timezone = gtp_v2.IE_UE_Timezone(length=2, Timezone=35)  #len=6, total=125
	ie_recoveryrestart = gtp_v2.IE_RecoveryRestart(length=1, restart_counter=9)  #len=5, total=130
	
	#Calculating APN Length
	apn_len = len(apn) + 1
	ie_apn = gtp_v2.IE_APN(length=apn_len, APN=apn) #len=4 + apn_len, total=apn_len + 4 + 130


	if interface == "S11":
		ip_layer = IP(src=mme, dst=sgw_s11_c)
		ie_fteid_s11 = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S11 MME GTP-C interface", GRE_Key=int(teid_mme_s11, 16), ipv4=mme) #len=13
		ie_fteid_s5 = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S5/S8 PGW GTP-C interface", GRE_Key=0, ipv4=pgw_s5_c)  #len=13, total=87
		ie_bearercontext = gtp_v2.IE_BearerContext(length=31) #len=35
		ie_epsbearerid = gtp_v2.IE_EPSBearerID(length=1, EBI=5) # Included in ie_bearercontext
		ie_bearer_qos = gtp_v2.IE_Bearer_QoS(length=22) # Included in ie_bearercontext
		gtp_len = apn_len + 4 + 130 + 13 + 35 + 8
		gtp_layer = gtp_v2.GTPHeader(gtp_type="create_session_req", length=gtp_len, P=0, seq=seqn)

	
		CreateSessionRequest =  Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp_v2.GTPV2CreateSessionRequest(IE_list=[ie_rat, ie_fteid_s11, ie_bearercontext, ie_epsbearerid, ie_bearer_qos, ie_imsi, ie_pdn_type, ie_apn_restriction, ie_mei, ie_uli, ie_servingnetwork, ie_indication, ie_fteid_s5, ie_apn, ie_selectionmode, ie_paa, ie_ambr, ie_chargingcharacteristics, ie_ue_timezone, ie_recoveryrestart ])

	elif interface == "S5":
		ip_layer = IP(src=sgw_s5_c, dst=pgw_s5_c)
		ie_fteid_s5 = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S5/S8 SGW GTP-C interface", GRE_Key=int(teid_sgw_s5_c, 16), ipv4=sgw_s5_c)
		ie_bearercontext = gtp_v2.IE_BearerContext(length=44)  #len=48
		ie_epsbearerid = gtp_v2.IE_EPSBearerID(length=1, EBI=5) # Included in ie_bearercontext
		ie_bearer_qos = gtp_v2.IE_Bearer_QoS(length=22) # Included in ie_bearercontext
		ie_fteid_bearer_s5_u = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S5/S8 SGW GTP-U interface", GRE_Key=int(teid_sgw_s5_u, 16), ipv4=sgw_s5_u) # Included in ie_bearercontext
		gtp_len = apn_len + 4 + 130 + 48 + 8
		gtp_layer = gtp_v2.GTPHeader(gtp_type="create_session_req", length=gtp_len, P=0, seq=seqn)

		CreateSessionRequest =  Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp_v2.GTPV2CreateSessionRequest(IE_list=[ie_rat, ie_imsi, ie_pdn_type, ie_apn_restriction, ie_mei, ie_uli, ie_servingnetwork, ie_indication, ie_fteid_s5, ie_apn, ie_selectionmode, ie_paa, ie_ambr, ie_chargingcharacteristics, ie_ue_timezone, ie_recoveryrestart, ie_bearercontext, ie_epsbearerid, ie_bearer_qos, ie_fteid_bearer_s5_u ])
	

	#Generating Create Session Response

	ie_cause = gtp_v2.IE_Cause(length=2, Cause="Request accepted") #len=6, total=6
	ie_fteid_s5 = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S5/S8 PGW GTP-C interface", GRE_Key=int(teid_pgw_s5_c, 16), ipv4=pgw_s5_c) #len=13, total=19
	ie_paa = gtp_v2.IE_PAA(length=5, PDN_type="IPv4", ipv4=ue_ip) #len=9, total=28
	ie_apn_restriction = gtp_v2.IE_APN_Restriction(length=1) #len=5, total=33


	if interface == "S11":
		ip_layer = IP(src=sgw_s11_c, dst=mme)
		ie_fteid_s11 = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S11/S4 SGW GTP-C interface", GRE_Key=int(teid_sgw_s11, 16), ipv4=sgw_s11_c) # len=13
		ie_bearercontext = gtp_v2.IE_BearerContext(length=37) #len=41
		ie_epsbearerid = gtp_v2.IE_EPSBearerID(length=1, EBI=5)
		ie_cause_bearer = gtp_v2.IE_Cause(length=2, Cause="Request accepted")
		ie_fteid_bearer_s1_u = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S1-U SGW GTP-U interface", GRE_Key=int(teid_sgw_s1u, 16), ipv4=sgw_s1u) # len=13, included in ie_bearercontext
		ie_fteid_bearer_s5_u = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S5/S8 PGW GTP-U interface", GRE_Key=int(teid_pgw_s5_u, 16), ipv4=pgw_s5_u) # len=13, included in ie_bearercontext
		gtp_len = 33 + 13 + 41 + 8
		gtp_layer = gtp_v2.GTPHeader(gtp_type="create_session_res", P=0, teid=int(teid_mme_s11, 16), length=gtp_len, seq=seqn)

		CreateSessionResponse = Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp_v2.GTPV2CreateSessionResponse(IE_list=[ie_cause, ie_fteid_s11, ie_fteid_s5, ie_paa, ie_apn_restriction, ie_bearercontext, ie_epsbearerid, ie_cause_bearer, ie_fteid_bearer_s1_u, ie_fteid_bearer_s5_u ])	

	elif interface == "S5":
		ip_layer = IP(src=pgw_s5_c, dst=sgw_s5_c)
		ie_bearercontext = gtp_v2.IE_BearerContext(length=24) #len=28
		ie_epsbearerid = gtp_v2.IE_EPSBearerID(length=1, EBI=5) # len=5, included in ie_bearercontext
		ie_cause_bearer = gtp_v2.IE_Cause(length=2, Cause="Request accepted") # len=6, included in ie_bearercontext
		ie_fteid_bearer_s5_u = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S5/S8 PGW GTP-U interface", GRE_Key=int(teid_pgw_s5_u, 16), ipv4=pgw_s5_u) # len=13, included in ie_bearercontext
		gtp_len = 33 + 28 + 8
		gtp_layer = gtp_v2.GTPHeader(gtp_type="create_session_res", P=0, teid=int(teid_sgw_s5_c, 16), length=gtp_len, seq=seqn)

		CreateSessionResponse = Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp_v2.GTPV2CreateSessionResponse(IE_list=[ie_cause, ie_fteid_s5, ie_paa, ie_apn_restriction, ie_bearercontext, ie_epsbearerid, ie_cause_bearer, ie_fteid_bearer_s5_u ])	


	finalPackets = PacketList()
	finalPackets.append(CreateSessionRequest)
	finalPackets.append(CreateSessionResponse)

	#Generating Modify Bearer Request and Response if Interface is S11

	if interface == "S11":
		ip_layer = IP(src=mme, dst=sgw_s11_c)
		ie_bearercontext = gtp_v2.IE_BearerContext(length=18) #len=22
		ie_epsbearerid = gtp_v2.IE_EPSBearerID(length=1, EBI=5) #len=5, included in ie_bearercontext
		ie_fteid_bearer_s1_u = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S1-U eNodeB GTP-U interface", GRE_Key=int(teid_enodeb_s1u, 16), ipv4=enodeb) #len=13, included in ie_bearercontext
		gtp_len = 22 + 8
		gtp_layer = gtp_v2.GTPHeader(gtp_type="modify_bearer_req", P=0, teid=int(teid_sgw_s11, 16), length=gtp_len, seq=seqn+1)
	
		ModifyBearerRequest =  Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp_v2.GTPV2ModifyBearerRequest(IE_list=[ie_bearercontext, ie_epsbearerid, ie_fteid_bearer_s1_u])

		ip_layer = IP(src=sgw_s11_c, dst=mme)
		ie_cause = gtp_v2.IE_Cause(length=2, Cause="Request accepted") #len=6, tot=6 
		ie_bearercontext = gtp_v2.IE_BearerContext(length=24) #len=28, tot=34
		ie_epsbearerid = gtp_v2.IE_EPSBearerID(length=1, EBI=5) #len=5, included in ie_bearercontext
		ie_cause_bearer = gtp_v2.IE_Cause(length=2, Cause="Request accepted") #len=6, included in ie_bearercontext
		ie_fteid_bearer_s1_u = gtp_v2.IE_FTEID(length=9, ipv4_present=1, InterfaceType="S1-U SGW GTP-U interface", GRE_Key=int(teid_sgw_s1u, 16), ipv4=sgw_s1u) #len=13, included in ie_bearercontext
		gtp_len = 6 + 28 + 8
		gtp_layer = gtp_v2.GTPHeader(gtp_type="modify_bearer_res", P=0, teid=int(teid_mme_s11, 16), length=gtp_len, seq=seqn+1)

		ModifyBearerResponse =  Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp_v2.GTPV2ModifyBearerRequest(IE_list=[ie_cause, ie_bearercontext, ie_epsbearerid, ie_cause_bearer, ie_fteid_bearer_s1_u])
	
		finalPackets.append(ModifyBearerRequest)
		finalPackets.append(ModifyBearerResponse)


	return finalPackets


def generateGTPv1C(sgsn_c, sgsn_u, ggsn_c, ggsn_u, imsi, imei, ue_ip, teid_sgsn_c, teid_sgsn_u, teid_ggsn_c, teid_ggsn_u, apn):

	from scapy.contrib import gtp

	#Generating Create PDP Context Request

	ip_layer = IP(src=sgsn_c, dst=ggsn_c)

	seqn = random.randint(2000,10000)
	udp_layer = UDP(sport=2123, dport=2123)
	ie_imsi = gtp.IE_IMSI(imsi=imsi) #len=9, total=9
	ie_rai = gtp.IE_Routing(MCC="525", MNC="05", LAC=65534, RAC=255) #len=7, total=16
	ie_recovery = gtp.IE_Recovery(restart_counter=71) #len=2, total=18
	ie_nsapi = gtp.IE_NSAPI(NSAPI=5) #len=2, total=20
	ie_teidi = gtp.IE_TEIDI(TEIDI=int(teid_sgsn_u, 16)) #len=5, total=25
	ie_teidc = gtp.IE_TEICP(TEICI=int(teid_sgsn_c, 16)) #len=5, total=30
	ie_gsnaddressc = gtp.IE_GSNAddress(length=4,ipv4_address=sgsn_c) #len=7, total=37
	ie_gsnaddressi = gtp.IE_GSNAddress(length=4,ipv4_address=sgsn_u) #len=7, total=44
	ie_qos = gtp.IE_QoS(length=15) #len=18, total=62
	ie_imei = gtp.IE_IMEI(length=8, IMEI=imei) #len=11, total=73
	ie_rattype = gtp.IE_RATType(RAT_Type="UTRAN") # len=4, total=77
	apn_len = len(apn) + 1
	ie_apn = gtp.IE_AccessPointName(length=apn_len, APN=apn) #len=3 + apn_len, total=apn_len + 3 + 77
	gtp_len = apn_len + 3 + 77 + 4
	gtp_layer = gtp.GTPHeader(gtp_type="create_pdp_context_req", S=1, length=gtp_len, seq=seqn)

	CreatePDPContextRequest = Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp.GTPCreatePDPContextRequest(IE_list=[ie_imsi, ie_rai, ie_recovery, ie_nsapi, ie_teidi, ie_teidc, ie_gsnaddressc, ie_gsnaddressi, ie_qos, ie_imei, ie_rattype, ie_apn])

	#CreatePDPContextRequest = Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp.GTPCreatePDPContextRequest(IE_list=[ie_imsi, ie_rai])


	#Generating Create PDP Context Response

	ip_layer = IP(src=ggsn_c, dst=sgsn_c)
	udp_layer = UDP(sport=2123, dport=2123)
	ie_cause = gtp.IE_Cause(CauseValue="Request accepted") #len=2, total=2
	ie_teidi = gtp.IE_TEIDI(TEIDI=int(teid_ggsn_u, 16)) #len=5, total=7
	ie_teidc = gtp.IE_TEICP(TEICI=int(teid_ggsn_c, 16)) #len=5, total=12
	ie_gsnaddressc = gtp.IE_GSNAddress(length=4,ipv4_address=ggsn_c) #len=7, total=19
	ie_gsnaddressi = gtp.IE_GSNAddress(length=4,ipv4_address=ggsn_u) #len=7, total=26
	ie_qos = gtp.IE_QoS(length=15) #len=18, total=44
	ie_enduseraddress = gtp.IE_EndUserAddress(length=6, PDPTypeNumber=int("0x21",16), PDPAddress=ue_ip)  #len=9, total=53
	gtp_layer = gtp.GTPHeader(gtp_type="create_pdp_context_res", teid=int(teid_sgsn_c, 16), S=1, length=57, seq=seqn)

	CreatePDPContextResponse = Ether(dst="b4:0c:25:e0:40:44", src="26:09:3c:d9:00:00") / ip_layer / udp_layer / gtp_layer / gtp.GTPCreatePDPContextRequest(IE_list=[ie_cause, ie_teidi, ie_teidc, ie_enduseraddress, ie_gsnaddressc, ie_gsnaddressi, ie_qos])

	finalPackets = PacketList()
	finalPackets.append(CreatePDPContextRequest)
	finalPackets.append(CreatePDPContextResponse)

	return finalPackets

#############################################################
# Function to Handle inputs for Generating S11 Signalling
#############################################################


def generateS11():

	print("\nReference Topology for 4G:")
	print("==============================\n")
	print("                       _   MME ")
	print("                       |    | ")
	print("                       |    | ")
	print("                     GTPc (S11) ")
	print("                       |    | ")
	print("                       |    | ")
	print("UE---eNodeB ---- (S1U)---- SGW ---- (S5/S8) ---- PGW ")
	print(" |--------- GTPu -----------|-------- GTPu -------| ")
	print("                            |-------- GTPc -------| ")
	print("\n\nEnter the following details :")
	print("-----------------------------")
	mme = input('\nMME IP : ')
	isValidIPv4(mme)
	
	teid_mme_s11 = input('TEID for MME-S11 Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_mme_s11)
	
	sgw_s11_c = input('\nSGW-S11 IP : ')
	isValidIPv4(sgw_s11_c)
	
	teid_sgw_s11 = input('TEID for SGW-S11 Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_sgw_s11)

	sgw_s1u = input('\nSGW-S1U IP : ')
	isValidIPv4(sgw_s1u)
	
	teid_sgw_s1u = input('TEID for SGW-S1U Interface (Example: 0x00001aec) : ')	
	isValidTEID(teid_sgw_s1u)

	pgw_s5_c = input('\nPGW-S5-C IP : ')
	isValidIPv4(pgw_s5_c)
	
	teid_pgw_s5_c = input('TEID for PGW-S5-C Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_pgw_s5_c)

	enodeb = input('\nENODE IP : ')
	isValidIPv4(enodeb)	

	teid_enodeb_s1u =  input('TEID for ENODEB-S11U Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_enodeb_s1u)
	
	ue_ip = input('\nEnd User IP Allocated IP : ')
	isValidIPv4(ue_ip)
	
	imsi = input('IMSI (Max 15 digit): ')
	isValidIdentify(imsi)
	
	imei = input('IMEI (Max 16 digit): ')
	isValidIdentify(imei)
	
	apn = input('APN : ')

	return generateGTPv2C("S11", mme, enodeb, sgw_s11_c, sgw_s1u, "1.1.1.1", "1.1.1.2", pgw_s5_c, pgw_s5_c, imsi, imei, ue_ip, teid_mme_s11, teid_enodeb_s1u, teid_sgw_s11, teid_sgw_s1u, "0x00002222", "0x00003333", teid_pgw_s5_c, "0x00005555", apn)
	

############################################################
# Function to Handle inputs for Generating S5 Signalling
############################################################

def generateS5():

	print("\nReference Topology for 4G:")
	print("==============================\n")
	print("                       _   MME ")
	print("                       |    | ")
	print("                       |    | ")
	print("                     GTPc (S11) ")
	print("                       |    | ")
	print("                       |    | ")
	print("UE---eNodeB ---- (S1U)---- SGW ---- (S5/S8) ---- PGW ")
	print(" |--------- GTPu -----------|-------- GTPu -------| ")
	print("                            |-------- GTPc -------| ")
	print("\n\nEnter the following details :")
	print("-----------------------------")
	sgw_s5_c = input('SGW-S5-C IP : ')
	isValidIPv4(sgw_s5_c)
	
	teid_sgw_s5_c = input('TEID for SGW-S5-C Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_sgw_s5_c)

	sgw_s5_u = input('\nSGW-S5-U IP : ')
	isValidIPv4(sgw_s5_u)
	
	teid_sgw_s5_u = input('TEID for SGW-S5-U Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_sgw_s5_u)

	pgw_s5_c = input('\nPGW-S5-C IP : ')
	isValidIPv4(pgw_s5_c)
	
	teid_pgw_s5_c = input('TEID for PGW-S5-C Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_pgw_s5_c)
	
	pgw_s5_u = input('\nPGW-S5-U IP : ')
	isValidIPv4(pgw_s5_u)
	
	teid_pgw_s5_u = input('TEID for PGW-S5-U Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_pgw_s5_u)

	ue_ip = input('\nEnd User IP Allocated IP : ')
	isValidIPv4(ue_ip)

	imsi = input('IMSI (Max 15 digit): ')
	isValidIdentify(imsi)
	
	imei = input('IMEI (Max 16 digit): ')
	isValidIdentify(imei)

	apn = input('APN : ')

	return generateGTPv2C("S5", "10.1.1.1", "10.2.1.1", "10.3.1.1", "10.4.1.1", sgw_s5_c, sgw_s5_u, pgw_s5_c, pgw_s5_u, imsi, imei, ue_ip, "0x00000011", "0x00000111", "0x00001111", "0x00011111", teid_sgw_s5_c, teid_sgw_s5_u, teid_pgw_s5_c, teid_pgw_s5_u, apn)

############################################################
# Function to Handle inputs for Generating Gn Signalling
############################################################

def generateGn():


	print("Reference Topology for 3G:")
	print("=========================\n")
	print("NodeB ---- (IuU)---- SGSN ---- (Gn) ---- GGSN ")
	
	sgsn_c = input('SGSN-C IP : ')
	isValidIPv4(sgsn_c)
	
	teid_sgsn_c = input('TEID for SGSN-C Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_sgsn_c)

	sgsn_u = input('\nSGSN-U IP : ')
	isValidIPv4(sgsn_u)
	
	teid_sgsn_u = input('TEID for SGSN-U Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_sgsn_u)

	ggsn_c = input('\nGGSN-C IP : ')
	isValidIPv4(ggsn_c)
	
	teid_ggsn_c = input('TEID for GGSN-C Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_ggsn_c)

	ggsn_u = input('\nGGSN-U IP : ')
	isValidIPv4(ggsn_u)
	
	teid_ggsn_u = input('TEID for GGSN-U Interface (Example: 0x00001aec) : ')
	isValidTEID(teid_ggsn_u)

	ue_ip = input('\nEnd User IP Allocated IP : ')
	isValidIPv4(ue_ip)

	imsi = input('IMSI (Max 15 digit): ')
	isValidIdentify(imsi)
	
	imei = input('IMEI (Max 16 digit): ')
	isValidIdentify(imei)

	apn = input('APN : ')

	return generateGTPv1C(sgsn_c, sgsn_u, ggsn_c, ggsn_u, imsi, imei, ue_ip, teid_sgsn_c, teid_sgsn_u, teid_ggsn_c, teid_ggsn_u, apn)


####################################################
# Function to parse GTP logs and generate Signalling
####################################################

def parseGtpLogs(interface_type):

	filename = input("\nNOTE : The csv file should contain one line each for Create Session Request, Create Session Response, Modify Bearer Request, Modify Bearer Response and multiple Modify Bearers are yet not supported. \n\nEnter the csv file name along with path from current directory : ")	

	with open(filename, mode='r') as csv_file:
		csv_reader = csv.DictReader(csv_file, delimiter=',')
		line_count = 0

		apn = ""

		if interface_type == "S11":
			for row in csv_reader:
				if row["msg_type"] == "Create Session Request":
					interface = row["gtp_interface"]
					mme = row["Source address"]
					enodeb = input('\nEnter ENODE IP. This value is the source IP of outer UDP header of uplink GTPu packets if captured on S1-U interface : ')
					isValidIPv4(enodeb)
					sgw_s11_c = row["Destination address"]
					sgw_s1u = input('\nSGW-S1U IP. This value is the source IP of outer UDP header of downlink GTPu packets if captured on S1-U interface : ')
					isValidIPv4(sgw_s1u)
					sgw_s5_c = "1.1.1.1"
					sgw_s5_u = "1.1.1.2"
					pgw_s5_c = input('\nPGW-S5-C IP. You can either enter a random IP address or if you have a sample CreateSessionRequest packet, use the IP from S5/S8 PGW GTP-C interface FTEID : ')
					isValidIPv4(pgw_s5_c)
					pgw_s5_u = pgw_s5_c
					imsi = str(Decimal(float(row["Tunnel ID/IMSI"])))
					imei = str(Decimal(float(row["Monitor Tag/IMEI"])))
					teid_mme_s11 = "0x" + row["teid1"]
					if apn == "":
						apn = row["apn"]

				elif row["msg_type"] == "Create Session Response":				
					ue_ip = row["end_ip_addr"]
					teid_sgw_s11 = "0x" + row["teid1"]
					teid_pgw_s5_c = "0x" + row["teid2"]
					teid_pgw_s5_u = teid_pgw_s5_c

				elif row["msg_type"] == "Modify Bearer Request":
					teid_enodeb_s1u = "0x" + row["teid1"]
				
				elif row["msg_type"] == "Modify Bearer Response":
					teid_sgw_s1u = "0x" + row["teid1"]
					
				elif row["event_type"] == "GTP session start":
					apn = row["apn"]
			
			return generateGTPv2C("S11", mme, enodeb, sgw_s11_c, sgw_s1u, "1.1.1.1", "1.1.1.2", pgw_s5_c, pgw_s5_u, imsi, imei, ue_ip, teid_mme_s11, teid_enodeb_s1u, teid_sgw_s11, teid_sgw_s1u, "0x00002222", "0x00003333", teid_pgw_s5_c, "0x00005555", apn)


		elif interface_type == "S5":
			for row in csv_reader:
				if row["msg_type"] == "Create Session Request":
					interface = row["gtp_interface"]
					sgw_s5_c = row["Source address"]
					sgw_s5_u = input('\nEnter SGW-S5-U IP. This value is the source IP of outer UDP header of uplink GTPu packets if captured on S5/S8 interface : ')
					isValidIPv4(sgw_s5_u)
					pgw_s5_c = row["Destination address"]
					pgw_s5_u = input('\nEnter PGW-S5-U IP. This value is the source IP of outer UDP header of downlink GTPu packets if captured on S5/S8 interface : ')
					isValidIPv4(pgw_s5_u)
					imsi = str(Decimal(float(row["Tunnel ID/IMSI"])))
					imei = str(Decimal(float(row["Monitor Tag/IMEI"])))
					teid_sgw_s5_c = "0x" + row["teid1"]
					teid_sgw_s5_u = "0x" + row["teid2"]
					if apn == "":
						apn = row["apn"]
				
				elif row["msg_type"] == "Create Session Response":				
					ue_ip = row["end_ip_addr"]
					teid_pgw_s5_c = "0x" + row["teid1"]
					teid_pgw_s5_u = "0x" + row["teid2"]
					
				elif row["event_type"] == "GTP session start":
					apn = row["apn"]

			return generateGTPv2C("S5", "10.1.1.1", "10.2.1.1", "10.3.1.1", "10.4.1.1", sgw_s5_c, sgw_s5_u, pgw_s5_c, pgw_s5_u, imsi, imei, ue_ip, "0x00000011", "0x00000111", "0x00001111", "0x00011111", teid_sgw_s5_c, teid_sgw_s5_u, teid_pgw_s5_c, teid_pgw_s5_u, apn)	
	


if __name__ == "__main__":
    
	print("\nHello. \n\nThis script will help you to generate packets corresponding to GTPc signalling session from start.")
	print("You can either input a GTP Logs .csv file or manually input your desired parameters.")
	print("Then you can append your own packets at the end to be able to successfully replay in lab.")
	print("\nWhat would you like to do?")
	print("\n1. Generate GTPc Signalling for Session Start on S11.")
	print("2. Generate GTPc Signalling for Session Start on S5/S8.")
	print("3. Generate GTPc Signalling for Session Start on Gn.")
	
	choice1 = int(input('\nEnter 1, 2 or 3 as desired: '))
	
	print("\n=============================================================================================================\n")
	
	finalPackets = PacketList()
	
	if choice1 == 1:

		print("Do you have?")
		print("\n1. Manual details like IPs/TEIDs for S11, S1-U, PGW-C and IMSI, IMEI, APN and End User IP Address?")
		print("2. GTP Logs in CSV format for Create Session Request, Create Session Response, Modify Bearer Request and Modify Bearer Response along with the headers?")
	
		choice2 = int(input("\nEnter your choice : "))
		print("\n=============================================================================================================\n")
		if choice2 == 1:
			finalPackets = generateS11()
		elif choice2 == 2:
			finalPackets = parseGtpLogs("S11")
		else:
			print("Stop wasting my time!!!")

	elif choice1 == 2:
	
		print("Do you have?")
		print("\n1. Manual details like IPs/TEIDs for SGW and PGW for S5-C and S5-U, IMSI, IMEI, APN and End User IP Address?")
		print("2. GTP Logs in CSV format for Create Session Request, Create Session Response along with the headers?")
	
		choice2 = int(input("\nEnter your choice : "))
		print("\n=============================================================================================================\n")
		if choice2 == 1:
			finalPackets = generateS5()
		elif choice2 == 2:
			finalPackets = parseGtpLogs("S5")
		else:
			print("Stop wasting my time!!!")

	elif choice1 == 3:
		print("Do you have?")
		print("\n1. Manual details like IPs/TEIDs for SGSN and GGSN for Gn Interface, IMSI, IMEI, APN and End User IP Address Ready")
		print("2. GTP Logs in CSV format for Create PDP Context Request and Create PDP Context Response along with the headers?")
	
		choice2 = int(input("\nEnter your choice : "))
		print("\n=============================================================================================================\n")
		if choice2 == 1:
			finalPackets = generateGn()
		elif choice2 == 2:
			print("Sorry.. Code is not ready yet")
		else:
			print("Stop wasting my time!!!")
	
		
		
	if len(finalPackets) > 0 :

		GTPuPacketsToBeInserted = input('\nDo you want to append some GTPc or GTPu packets after the Session Start (y/n) :')

		if GTPuPacketsToBeInserted in ['y', 'Y']:
			inputFile = input('\nType the filename (should be in your present working directory) : ')
			inputPackets = PcapReader(inputFile)
			for packet in inputPackets:
				packet.time = time.time()
				finalPackets.append(packet)

		print("\n=============================================================================================================")
		print("Pcaps generated successfully. Filename : GTPSessionStart.pcap\nNOTE: MAC addresses are random so change using tcprewrite as applicable. ")
		wrpcap("GTPSessionStart.pcap",finalPackets)	
		print("\n=============================================================================================================")
